{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { routerTransition } from '../../router.animations';\nimport { ModalDismissReasons, NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { HttpClient } from '@angular/common/http'; // var dt = require( 'datatables.net' )();\n\nimport { Router } from '@angular/router';\nimport { isNumeric } from 'rxjs/internal-compatibility';\nimport { ToastrManager } from 'ng6-toastr-notifications';\nimport { DashboardService } from '../../shared/services/dashboard.service';\nlet DashboardComponent = class DashboardComponent {\n  constructor(modalService, http, router, dashboardservice, notificationMessages) {\n    this.modalService = modalService;\n    this.http = http;\n    this.router = router;\n    this.dashboardservice = dashboardservice;\n    this.notificationMessages = notificationMessages;\n    this.waitSpinner = true;\n    this.showSpinner = false;\n    this.barcode = '';\n    this.values = [];\n    this.txtAckMirno = '';\n    this.txtweightinton = '';\n    this.txttotalsetup = '';\n    this.txttotaloptions = '';\n    this.txttheortime = '';\n    this.loggedInUserName = '';\n    this.plantCode = localStorage.getItem(\"plantcode\");\n    this.poType = '';\n    this.optionSelectedGroup = 'null';\n    this.groups = [];\n    this.workCenter = [];\n    this.optionSelectedWorkCenter = 'null';\n    this.SECTION_TYPE = [\"ShiftA\", \"ShiftB\", \"ShiftC\", \"ShiftD\"];\n    this.optionSelectedShift = \"null\";\n    this.pddetails = [];\n    this.rdrFicep = false;\n    this.rdrVernet = false;\n    this.rdrDrilling = false;\n    this.radioButton1 = false;\n    this.radioButton2 = false;\n\n    if (localStorage.getItem('isLoggedin') == 'true') {\n      this.loggedInUserName = localStorage.getItem('userName'); //loading group data at page load\n\n      this.loadGroups(); // this.bindDataGridALLRecords('000080000014','TM02')\n    } else {\n      this.notificationMessages.errorToastr('Session logged out!! Please login again!!');\n      this.router.navigate(['/login']);\n    }\n  }\n\n  ngOnInit() {}\n\n  onEnter() {\n    this.findDB();\n  }\n\n  onOptionsSelectedGroup(event) {\n    this.optionSelectedGroup = event;\n    this.loadWorkCenter(event);\n  }\n\n  loadGroups() {\n    this.dashboardservice.GetGroups().subscribe(groupsData => {\n      this.groups = groupsData;\n    });\n  }\n\n  onOptionsSelectedWorkCenter(event) {\n    this.optionSelectedWorkCenter = event;\n  }\n\n  loadWorkCenter(group) {\n    console.log('group', group);\n    this.dashboardservice.GetWorkCenter(group).subscribe(workCenterData => {\n      this.workCenter = workCenterData;\n    });\n  }\n\n  onOptionsSelectedShift(event) {\n    this.optionSelectedShift = event;\n  }\n\n  clearText() {\n    this.txtweightinton = '';\n    this.txttotalsetup = '';\n    this.txttotaloptions = '';\n    this.txttheortime = '';\n  } // pddetails: any[] = [];\n  // bindDataGridALLRecords(mirno: string, plantCode: string) {\n  //   this.dashboardservice.bindDataGridALLRecords(mirno, plantCode).subscribe(productionData => {\n  //     this.pddetails = productionData;\n  //     console.log(this.pddetails);\n  //   });\n  // }\n\n\n  findDB() {\n    this.waitSpinner = false;\n    this.showSpinner = true;\n    this.txtAckMirno = this.txtAckMirno.padStart(12, '0');\n    this.clearText();\n\n    if (isNumeric(this.txtAckMirno) != true) {\n      this.notificationMessages.errorToastr(\"Enter correct Numeric MIR Number\");\n      this.waitSpinner = true;\n      this.showSpinner = false;\n      return;\n    }\n\n    this.section1 = this.txtAckMirno;\n    this.section1 = this.section1.substring(0, this.section1.length - (this.section1.length - 1));\n    console.log(typeof this.section1);\n\n    if (this.section1 != 0) {\n      this.waitSpinner = true;\n      this.showSpinner = false;\n      this.notificationMessages.errorToastr(\"Enter valid MIR number\");\n      return;\n    }\n\n    this.dashboardservice.getBpByMirno(this.txtAckMirno).subscribe(data => {\n      var bp1 = data;\n\n      if (bp1 != this.section1) {\n        this.waitSpinner = true;\n        this.showSpinner = false;\n        this.notificationMessages.errorToastr(\"MIR \" + this.txtAckMirno + \" is from \" + data + \" Plant\");\n        return;\n      }\n    });\n    var strconfirm = confirm(\"MIR Number \" + this.txtAckMirno + \" Already Added in Shoplink:Do you want to add missing Production Orders?\");\n\n    if (strconfirm == true) {\n      this.dashboardservice.findDB(this.txtAckMirno).subscribe(data => {\n        console.log('data', data);\n\n        if (0 != null) {} else {\n          this.waitSpinner = true;\n          this.showSpinner = false;\n          this.notificationMessages.errorToastr('Added!!');\n          return;\n        }\n      });\n    } else {}\n  }\n\n  onSearchClick() {\n    this.waitSpinner = false;\n    this.showSpinner = true;\n    this.clearText();\n    this.txtAckMirno = this.txtAckMirno.padStart(12, '0');\n    this.dashboardservice.bindDataGridALLRecords(this.txtAckMirno, this.plantCode, this.poType = '').subscribe(result => {\n      this.pddetails = result;\n\n      if (this.pddetails.length == 0 || this.pddetails == null) {\n        this.notificationMessages.errorToastr(\"MIR \" + this.txtAckMirno + \" not available in SHOPlink database\");\n        return;\n      }\n\n      this.dashboardservice.getCalculations(this.txtAckMirno, this.plantCode, this.poType = '').subscribe(result => {\n        this.txtweightinton = result[0].totalWheight;\n        this.txttotalsetup = result[0].rSno;\n        this.txttotaloptions = result[0].totalOpns;\n        this.txttheortime = result[0].runTime;\n      });\n    });\n    this.waitSpinner = true;\n    this.showSpinner = false;\n  }\n\n  releasePO() {\n    this.dashboardservice.releasePO(this.txtAckMirno, this.plantCode).subscribe(result => {\n      var totalPO = result.totalPO;\n      var releasedPO = result.releasedPO;\n      var totalreleased = result.totalreleased;\n\n      if (releasedPO > 0) {\n        this.dashboardservice.getCalculations(this.txtAckMirno, this.plantCode, this.poType = 'Primary').subscribe(result => {\n          this.txtweightinton = result[0].totalWheight;\n          this.txttotalsetup = result[0].rSno;\n          this.txttotaloptions = result[0].totalOpns;\n          this.txttheortime = result[0].runTime;\n        });\n        this.dashboardservice.bindDataGridALLRecords(this.txtAckMirno, this.plantCode, this.poType = 'Primary').subscribe(result => {\n          this.pddetails = result;\n        });\n        var compltedPO = releasedPO + totalreleased;\n        if (totalPO != releasedPO + totalreleased) alert(totalPO - releasedPO + \" Workorders are pending for release. Please repeat the process to release pending workorders\");else alert(\"Total \" + compltedPO + \" Production Orders are Released out of \" + totalPO + \", MIR No: \" + this.txtAckMirno);\n        this.txtAckMirno = \"\";\n      }\n    });\n  }\n\n  onAckmirClick() {\n    this.clearText();\n    this.waitSpinner = false;\n    this.showSpinner = true;\n    this.txtAckMirno = this.txtAckMirno.padStart(12, '0');\n\n    if (isNumeric(this.txtAckMirno) != true) {\n      this.notificationMessages.errorToastr(\"Enter correct Numeric MIR Number\");\n      this.waitSpinner = true;\n      this.showSpinner = false;\n      return;\n    }\n\n    this.dashboardservice.getOperationsByMirno(this.txtAckMirno).subscribe(result => {\n      if (result[0].length > 0) {\n        var flag_Ack = result[0].flag_Ack;\n        var bp = result[0].bp;\n\n        if (bp != this.plantCode) {\n          this.notificationMessages.errorToastr(\"MIR \" + this.txtAckMirno + \" is from \" + bp + \" Plant. Cannot change WorkCenter\");\n          this.waitSpinner = true;\n          this.showSpinner = false;\n          return;\n        }\n\n        if (flag_Ack == 'TRUE') {\n          this.dashboardservice.gettotalWO_Totalreleased(this.txtAckMirno).subscribe(result => {\n            if (result == true) {\n              var strconfirm = confirm(\"All Workorders are not released in MIR: \" + this.txtAckMirno + \", Do you want to release the pending workorders?\");\n\n              if (strconfirm == true) {\n                this.releasePO();\n              } else {\n                this.waitSpinner = true;\n                this.showSpinner = false;\n                return;\n              }\n            } else {\n              var strconfirm = confirm(\"All Workorders are released in MIR: \" + this.txtAckMirno + \",  Do you want to repeate the releasing Process?\");\n\n              if (strconfirm == true) {\n                this.releasePO();\n              } else {\n                this.waitSpinner = true;\n                this.showSpinner = false;\n                return;\n              }\n            }\n          });\n        }\n      } else {\n        alert(\"MIR is not available Shoplink database\");\n      }\n    });\n  }\n\n  onAckPOclick() {\n    this.waitSpinner = false;\n    this.showSpinner = true;\n    this.txtAckMirno = this.txtAckMirno.padStart(12, '0');\n\n    if (isNumeric(this.txtAckMirno) != true) {\n      this.notificationMessages.errorToastr(\"Enter correct Numeric Production Order Number\");\n      this.waitSpinner = true;\n      this.showSpinner = false;\n      return;\n    }\n\n    this.dashboardservice.ackPO(this.txtAckMirno).subscribe(result => {\n      this.notificationMessages.errorToastr(result);\n      this.waitSpinner = true;\n      this.showSpinner = false;\n      return;\n    });\n  }\n\n  allocate() {\n    this.clearText();\n    this.waitSpinner = false;\n    this.showSpinner = true;\n    this.txtAckMirno = this.txtAckMirno.padStart(12, '0');\n\n    if (isNumeric(this.txtAckMirno) != true) {\n      this.notificationMessages.errorToastr(\"Enter correct Numeric MIR Number\");\n      this.waitSpinner = true;\n      this.showSpinner = false;\n      return;\n    }\n\n    if (this.txtAckMirno.length != 12) {\n      this.notificationMessages.errorToastr(\"Enter correct MIR Number\");\n      return;\n    }\n\n    this.section1 = this.txtAckMirno;\n    this.section1 = this.section1.substring(0, this.section1.length - (this.section1.length - 1));\n\n    if (this.section1 != 0) {\n      this.waitSpinner = true;\n      this.showSpinner = false;\n      this.notificationMessages.errorToastr(\"Enter valid MIR number\");\n      return;\n    }\n\n    var txtRack = \"\";\n    this.dashboardservice.allocate(this.txtAckMirno, this.plantCode, this.optionSelectedGroup, this.optionSelectedWorkCenter, this.optionSelectedShift, txtRack).subscribe(result => {\n      alert(result);\n      this.dashboardservice.bindDataGridAfterAllocate(this.txtAckMirno, this.plantCode).subscribe(result => {\n        this.pddetails = result;\n      });\n      this.dashboardservice.getCalculationsAfterAllocate(this.txtAckMirno, this.plantCode).subscribe(calresult => {\n        this.txtweightinton = calresult[0].totalWheight;\n        this.txttotalsetup = calresult[0].rSno;\n        this.txttotaloptions = calresult[0].totalOpns;\n        this.txttheortime = calresult[0].runTime;\n      });\n      this.waitSpinner = true;\n      this.showSpinner = false;\n    });\n  }\n\n  onEnterPlanMIR() {\n    this.allocate();\n  }\n\n  onAssignClick() {\n    this.allocate();\n  }\n\n  onMassUpdateClick() {\n    this.notificationMessages.errorToastr(\"Work in progress\");\n    return;\n  }\n\n  onDeleteMIRClick() {\n    this.waitSpinner = false;\n    this.showSpinner = true;\n\n    if (isNumeric(this.txtAckMirno) != true) {\n      this.notificationMessages.errorToastr(\"Enter correct Numeric MIR Number\");\n      this.waitSpinner = true;\n      this.showSpinner = false;\n      return;\n    }\n\n    if (this.txtAckMirno != \"\") {\n      var strconfirm = confirm(\"Are you sure you want to delete record?\");\n\n      if (strconfirm == true) {\n        var query = \"delete from Operations where Mirno='\" + this.txtAckMirno + \"' and MachineName is null\";\n        this.dashboardservice.insertUpdateDelete(query).subscribe(result => {\n          if (result == 'true') {\n            this.notificationMessages.successToastr(\"Record deleted successfully\");\n          } else {\n            this.notificationMessages.errorToastr(\"MIR is Allocated to Machine First Deallocate then delete MIR\");\n          }\n        });\n        this.dashboardservice.bindDataGridALLRecords(this.txtAckMirno, this.plantCode, this.poType = '').subscribe(result => {\n          this.pddetails = result;\n        });\n        this.waitSpinner = true;\n        this.showSpinner = false;\n      } else {\n        this.waitSpinner = true;\n        this.showSpinner = false;\n        return;\n      }\n    } else {\n      this.waitSpinner = true;\n      this.showSpinner = false;\n      this.notificationMessages.errorToastr(\"MIR should not be blank\");\n      return;\n    }\n  }\n\n  onMainScreenClick() {\n    this.waitSpinner = false;\n    this.showSpinner = true;\n    this.dashboardservice.bindDataGridALLRecords(this.txtAckMirno, this.plantCode, this.poType = '').subscribe(result => {\n      this.pddetails = result;\n      this.waitSpinner = true;\n      this.showSpinner = false;\n    });\n  }\n\n  onRadiobuttonClick(flag) {\n    if (flag == 1) {\n      this.rdrFicep = true;\n      this.rdrVernet = false;\n      this.rdrDrilling = false;\n    }\n\n    if (flag == 2) {\n      this.rdrFicep = false;\n      this.rdrVernet = true;\n      this.rdrDrilling = false;\n    }\n\n    if (flag == 3) {\n      this.rdrFicep = false;\n      this.rdrVernet = false;\n      this.rdrDrilling = true;\n    }\n  }\n\n  onLoadScreenClick() {\n    this.clearText();\n\n    if (this.rdrFicep == false && this.rdrVernet == false && this.rdrDrilling == false) {\n      this.notificationMessages.errorToastr(\"Please select machine type 1. FICEP 2. VERNET 3. DRILLING\");\n      return;\n    }\n\n    if (this.txtAckMirno != \"\") {\n      this.dashboardservice.onLoadScreen(this.txtAckMirno, this.rdrFicep, this.rdrVernet, this.rdrDrilling).subscribe(result => {\n        this.txtweightinton = result[0].totalWheight;\n        this.txttotalsetup = result[0].rSno;\n        this.txttotaloptions = result[0].totalOpns;\n        this.txttheortime = result[0].runTime;\n      });\n    } else {\n      this.dashboardservice.totweight1(this.txtAckMirno).subscribe(result => {\n        if (result != \"\") {\n          this.txtweightinton = result[0].totalWheight;\n          this.txttotalsetup = result[0].rSno;\n          this.txttotaloptions = result[0].totalOpns;\n          this.txttheortime = result[0].runTime;\n        }\n      });\n    }\n\n    this.waitSpinner = true;\n    this.showSpinner = false;\n  }\n\n  onBalPunchMIRClick() {\n    var dateTimePicker1 = Date.now();\n    this.dashboardservice.onBalPunchMIR(dateTimePicker1.toString()).subscribe(result => {\n      if (result != \"\") {\n        this.txtweightinton = result[0].totalWheight;\n        this.txttotalsetup = result[0].rSno;\n        this.txttotaloptions = result[0].totalOpns;\n        this.txttheortime = result[0].runTime;\n      }\n\n      this.dashboardservice.bindDataGridOnPunchMIR(this.plantCode, dateTimePicker1.toString()).subscribe(result => {\n        this.pddetails = result;\n      });\n    });\n  }\n\n  onDeleteMIRLeftClick() {\n    this.waitSpinner = false;\n    this.showSpinner = true;\n    this.clearText();\n\n    if (isNumeric(this.txtAckMirno) != true) {\n      this.notificationMessages.errorToastr(\"Enter correct Numeric MIR Number\");\n      this.waitSpinner = true;\n      this.showSpinner = false;\n      return;\n    }\n\n    this.dashboardservice.getOperationsByMirno(this.txtAckMirno).subscribe(result => {\n      if (result[0].length > 0) {\n        var flag_Ack = result[0].flag_Ack;\n      } else {\n        this.notificationMessages.errorToastr(\"Data is not Available in SHOPLink\");\n        return;\n      }\n\n      if (this.txtAckMirno != \"\") {\n        var strconfirm = confirm(\"Are you sure you want to delete record?\");\n\n        if (strconfirm == true) {\n          var query = \"delete from Operations where Mirno='\" + this.txtAckMirno + \"' \";\n          this.dashboardservice.insertUpdateDelete(query).subscribe(result => {\n            if (result == 'true') {\n              this.notificationMessages.successToastr(\"Record deleted successfully\");\n            } else {\n              this.notificationMessages.errorToastr(\"Ooops problem occured while deleting records.!\");\n            }\n          });\n          this.dashboardservice.bindDataGridALLRecords(this.txtAckMirno, this.plantCode, this.poType = '').subscribe(result => {\n            this.pddetails = result;\n          });\n          this.waitSpinner = true;\n          this.showSpinner = false;\n        } else {\n          this.waitSpinner = true;\n          this.showSpinner = false;\n          return;\n        }\n      } else {\n        this.waitSpinner = true;\n        this.showSpinner = false;\n        this.notificationMessages.errorToastr(\"MIR should not be blank\");\n        return;\n      }\n    });\n  }\n\n  onBalAllocateClick() {\n    var dateTimePicker1 = Date.now();\n    this.dashboardservice.onBalAllocateMIR().subscribe(result => {\n      if (result != \"\") {\n        this.txtweightinton = result[0].totalWheight;\n        this.txttotalsetup = result[0].rSno;\n        this.txttotaloptions = result[0].totalOpns;\n        this.txttheortime = result[0].runTime;\n      }\n\n      this.dashboardservice.bindDataGridOnAllocateMIR(this.plantCode).subscribe(result => {\n        this.pddetails = result;\n      });\n    });\n  }\n\n  radioButton1Click(flag) {\n    if (flag == 1) {\n      this.radioButton1 = true;\n      this.dashboardservice.bindDataGridOnradioButton1(this.plantCode).subscribe(result => {\n        this.pddetails = result;\n      });\n    }\n\n    if (flag == 2) {\n      this.radioButton2 = true;\n      this.pddetails = [];\n    }\n  }\n\n  onExportToExcelClick() {\n    this.notificationMessages.errorToastr(\"Work in progress\");\n  }\n\n  onShop1() {\n    this.notificationMessages.errorToastr(\"Work in progress\");\n  }\n\n  onButton1click() {\n    this.notificationMessages.errorToastr(\"Work in progress\");\n  }\n\n  triggerModal(content) {\n    this.modalService.open(content, {\n      ariaLabelledBy: 'modal-basic-title',\n      size: 'xl',\n      backdrop: 'static'\n    }).result.then(res => {\n      this.closeModal = `Closed with: ${res}`;\n    }, res => {\n      this.closeModal = `Dismissed ${this.getDismissReason(res)}`;\n    });\n  }\n\n  getDismissReason(reason) {\n    if (reason === ModalDismissReasons.ESC) {\n      return 'by pressing ESC';\n    } else if (reason === ModalDismissReasons.BACKDROP_CLICK) {\n      return 'by clicking on a backdrop';\n    } else {\n      return `with: ${reason}`;\n    }\n  }\n\n  refresh() {\n    // this.router.navigate(['/dashboard']);\n    window.location.reload();\n  }\n\n};\nDashboardComponent = __decorate([Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss'],\n  animations: [routerTransition()]\n}), __metadata(\"design:paramtypes\", [NgbModal, HttpClient, Router, DashboardService, ToastrManager])], DashboardComponent);\nexport { DashboardComponent };","map":null,"metadata":{},"sourceType":"module"}