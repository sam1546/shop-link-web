{"ast":null,"code":"import { routerTransition } from '../../router.animations';\nimport { ModalDismissReasons, NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { HttpClient } from '@angular/common/http'; // var dt = require( 'datatables.net' )();\n\nimport { Router } from '@angular/router';\nimport { isNumeric } from 'rxjs/internal-compatibility';\nimport { ToastrManager } from 'ng6-toastr-notifications';\nimport { DashboardService } from '../../shared/services/dashboard.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ng-bootstrap/ng-bootstrap\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../../shared/services/dashboard.service\";\nimport * as i5 from \"ng6-toastr-notifications\";\nexport let DashboardComponent = /*#__PURE__*/(() => {\n  class DashboardComponent {\n    constructor(modalService, http, router, dashboardservice, notificationMessages) {\n      this.modalService = modalService;\n      this.http = http;\n      this.router = router;\n      this.dashboardservice = dashboardservice;\n      this.notificationMessages = notificationMessages;\n      this.waitSpinner = true;\n      this.showSpinner = false;\n      this.barcode = '';\n      this.values = [];\n      this.txtAckMirno = '';\n      this.txtweightinton = '';\n      this.txttotalsetup = '';\n      this.txttotaloptions = '';\n      this.txttheortime = '';\n      this.loggedInUserName = '';\n      this.optionSelectedGroup = 'null';\n      this.groups = [];\n      this.workCenter = [];\n      this.optionSelectedWorkCenter = 'null';\n      this.SECTION_TYPE = [\"ShiftA\", \"ShiftB\", \"ShiftC\", \"ShiftD\"];\n      this.optionSelectedShift = \"null\";\n      this.pddetails = [];\n\n      if (localStorage.getItem('isLoggedin') == 'true') {\n        this.loggedInUserName = localStorage.getItem('userName'); //loading group data at page load\n\n        this.loadGroups();\n        this.loadGridData('41085684', 'TM02');\n      } else {\n        this.router.navigate(['/login']);\n        this.notificationMessages.errorToastr('Session logged out!! Please login again!!');\n      }\n    }\n\n    ngOnInit() {}\n\n    onEnter() {\n      this.findDB();\n    }\n\n    onOptionsSelectedGroup(event) {\n      console.log(event); //option value will be sent as event\n\n      this.optionSelectedGroup = event;\n      this.loadWorkCenter(event);\n    }\n\n    loadGroups() {\n      this.dashboardservice.GetGroups().subscribe(groupsData => {\n        this.groups = groupsData;\n      });\n    }\n\n    onOptionsSelectedWorkCenter(event) {\n      this.optionSelectedWorkCenter = event; // console.log(event); //option value will be sent as event\n    }\n\n    loadWorkCenter(group) {\n      console.log('group', group);\n      this.dashboardservice.GetWorkCenter(group).subscribe(workCenterData => {\n        this.workCenter = workCenterData;\n      });\n    }\n\n    onOptionsSelectedShift(event) {\n      console.log(event); //option value will be sent as event\n    }\n\n    clearText() {\n      this.txtweightinton = '';\n      this.txttotalsetup = '';\n      this.txttotaloptions = '';\n      this.txttheortime = '';\n    }\n\n    loadGridData(mirno, plantCode) {\n      this.dashboardservice.GetDashboardData(mirno, plantCode).subscribe(productionData => {\n        this.pddetails = productionData;\n      });\n    }\n\n    findDB() {\n      this.waitSpinner = false;\n      this.showSpinner = true;\n      this.txtAckMirno = this.txtAckMirno.padStart(12, '0');\n      this.clearText();\n\n      if (isNumeric(this.txtAckMirno) != true) {\n        this.notificationMessages.errorToastr(\"Enter correct Numeric MIR Number\");\n        this.waitSpinner = true;\n        this.showSpinner = false;\n        return;\n      }\n\n      this.section1 = this.txtAckMirno;\n      this.section1 = this.section1.substring(0, this.section1.length - (this.section1.length - 1));\n      console.log(typeof this.section1);\n\n      if (this.section1 != 0) {\n        this.waitSpinner = true;\n        this.showSpinner = false;\n        this.notificationMessages.errorToastr(\"Enter valid MIR number\");\n        return;\n      } // this.dashboardservice.getOperationByMirno(this.txtAckMirno).subscribe((data: Response) => {\n      //   var bp1 = data\n      //   if (bp1 != this.section1) { \n      //     this.notificationMessages.errorToastr(\"MIR \" + this.txtAckMirno + \" is from \" + data + \" Plant\")\n      //     return;\n      //   } \n      // });\n\n\n      var strconfirm = confirm(\"MIR Number \" + this.txtAckMirno + \" Already Added in Shoplink:Do you want to add missing Production Orders?\");\n\n      if (strconfirm == true) {\n        alert('yes');\n      } else {\n        alert('no');\n      } // this.dashboardservice.findDB().subscribe((data: Response) => {\n      //   console.log('data', data); \n      //   if (0 != null) { \n      //   }\n      //   else {\n      //     this.waitSpinner = true;\n      //     this.showSpinner = false;\n      //     this.notificationMessages.errorToastr('Added!!')\n      //     return;\n      //   }\n      // });\n\n    }\n\n    triggerModal(content) {\n      this.modalService.open(content, {\n        ariaLabelledBy: 'modal-basic-title',\n        size: 'xl',\n        backdrop: 'static'\n      }).result.then(res => {\n        this.closeModal = `Closed with: ${res}`;\n      }, res => {\n        this.closeModal = `Dismissed ${this.getDismissReason(res)}`;\n      });\n    }\n\n    getDismissReason(reason) {\n      if (reason === ModalDismissReasons.ESC) {\n        return 'by pressing ESC';\n      } else if (reason === ModalDismissReasons.BACKDROP_CLICK) {\n        return 'by clicking on a backdrop';\n      } else {\n        return `with: ${reason}`;\n      }\n    }\n\n    refresh() {\n      // this.router.navigate(['/dashboard']);\n      window.location.reload();\n    }\n\n  }\n\n  DashboardComponent.ɵfac = function DashboardComponent_Factory(t) {\n    return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i1.NgbModal), i0.ɵɵdirectiveInject(i2.HttpClient), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.DashboardService), i0.ɵɵdirectiveInject(i5.ToastrManager));\n  };\n\n  DashboardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DashboardComponent,\n    selectors: [[\"app-dashboard\"]],\n    decls: 0,\n    vars: 0,\n    template: function DashboardComponent_Template(rf, ctx) {},\n    styles: [\"\"],\n    data: {\n      animation: [routerTransition()]\n    }\n  });\n  return DashboardComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}