{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { Response, Http } from '@angular/http';\nimport { map, catchError } from 'rxjs/operators';\nimport * as glob from '../models/global';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/http\";\nexport let DashboardService = /*#__PURE__*/(() => {\n  class DashboardService {\n    constructor(http, httpd) {\n      this.http = http;\n      this.httpd = httpd;\n    }\n\n    findDB(txtAckMirno) {\n      return this.httpd.get(glob.apiUrl + \"Dashboard/findDB\", {\n        params: {\n          mirono: txtAckMirno\n        }\n      }).pipe(map(response => {\n        return response.json();\n      }), catchError(error => {\n        return \"error\";\n      }));\n    }\n\n    bindDataGridALLRecords(mirno, plantCode, poType) {\n      return this.http.get(glob.apiUrl + \"Dashboard/bindDataGridALLRecords\", {\n        params: {\n          mirno: mirno,\n          plantCode: plantCode,\n          poType: poType\n        }\n      }).pipe(map(response => {\n        return response;\n      }), catchError(error => {\n        return \"error\";\n      }));\n    }\n\n    GetWorkCenter(group) {\n      return this.httpd.get(glob.apiUrl + \"Dashboard/loadWorkCenters\", {\n        params: {\n          group: group\n        }\n      }).pipe(map(response => {\n        return response.json();\n      }), catchError(error => {\n        return \"error\";\n      }));\n    }\n\n    GetGroups() {\n      return this.httpd.get(glob.apiUrl + \"Dashboard/loadGroups\").pipe(map(response => {\n        return response.json();\n      }));\n    }\n\n    getBpByMirno(mirno) {\n      return this.httpd.get(glob.apiUrl + \"Dashboard/getBpByMirno\", {\n        params: {\n          mirno: mirno\n        }\n      }).pipe(map(response => {\n        return response.json();\n      }));\n    }\n\n    getCalculations(mirno, plantcode, poType) {\n      return this.httpd.get(glob.apiUrl + \"Dashboard/getCalculations\", {\n        params: {\n          mirno: mirno,\n          plantcode: plantcode,\n          poType: poType\n        }\n      }).pipe(map(response => {\n        return response.json();\n      }));\n    }\n\n    getOperationsByMirno(mirno) {\n      return this.httpd.get(glob.apiUrl + \"Dashboard/getOperationsByMirno\", {\n        params: {\n          mirno: mirno\n        }\n      }).pipe(map(response => {\n        return response.json();\n      }));\n    }\n\n    gettotalWO_Totalreleased(mirno) {\n      return this.httpd.get(glob.apiUrl + \"Dashboard/gettotalWO_Totalreleased\", {\n        params: {\n          mirno: mirno\n        }\n      }).pipe(map(response => {\n        return response.json();\n      }));\n    }\n\n    releasePO(mirno, plantCode) {\n      return this.httpd.get(glob.apiUrl + \"Dashboard/releasePO\", {\n        params: {\n          mirno: mirno,\n          plantCode: plantCode\n        }\n      }).pipe(map(response => {\n        return response.json();\n      }));\n    }\n\n    ackPO(mirno) {\n      return this.httpd.get(glob.apiUrl + \"Dashboard/ackPO\", {\n        params: {\n          mirno: mirno\n        }\n      }).pipe(map(response => {\n        return response.json();\n      }));\n    }\n\n    allocate(mirno, plantCode, comboBox_MachineName, cmb_Group, cmbShift, txtRack) {\n      return this.httpd.get(glob.apiUrl + \"Dashboard/allocate\", {\n        params: {\n          mirno: mirno,\n          plantCode: plantCode,\n          comboBox_MachineName: comboBox_MachineName,\n          cmb_Group: cmb_Group,\n          cmbShift: cmbShift,\n          txtRack: txtRack\n        }\n      }).pipe(map(response => {\n        return response.json();\n      }));\n    }\n\n    bindDataGridAfterAllocate(mirno, plantCode) {\n      return this.http.get(glob.apiUrl + \"Dashboard/bindDataGridAfterAllocate\", {\n        params: {\n          mirno: mirno,\n          plantCode: plantCode\n        }\n      }).pipe(map(response => {\n        return response;\n      }), catchError(error => {\n        return \"error\";\n      }));\n    }\n\n    getCalculationsAfterAllocate(mirno, plantcode) {\n      return this.httpd.get(glob.apiUrl + \"Dashboard/getCalculationsAfterAllocate\", {\n        params: {\n          mirno: mirno,\n          plantcode: plantcode\n        }\n      }).pipe(map(response => {\n        return response.json();\n      }));\n    }\n\n    insertUpdateDelete(query) {\n      return this.httpd.get(glob.apiUrl + \"Dashboard/insertUpdateDelete\", {\n        params: {\n          query: query\n        }\n      }).pipe(map(response => {\n        return response.json();\n      }));\n    }\n\n    onLoadScreen(mirno, rdrFicep, rdrVernet, rdrDrilling) {\n      return this.httpd.get(glob.apiUrl + \"Dashboard/onLoadScreen\", {\n        params: {\n          mirno: mirno,\n          rdrFicep: rdrFicep,\n          rdrVernet: rdrVernet,\n          rdrDrilling: rdrDrilling\n        }\n      }).pipe(map(response => {\n        return response.json();\n      }));\n    }\n\n    totweight1(mirno) {\n      return this.httpd.get(glob.apiUrl + \"Dashboard/totweight1\", {\n        params: {\n          mirno: mirno\n        }\n      }).pipe(map(response => {\n        return response.json();\n      }));\n    }\n\n    onBalPunchMIR(dateTimePicker1) {\n      return this.httpd.get(glob.apiUrl + \"Dashboard/onBalPunchMIR\", {\n        params: {\n          dateTimePicker1: dateTimePicker1\n        }\n      }).pipe(map(response => {\n        return response.json();\n      }));\n    }\n\n    bindDataGridOnPunchMIR(plantCode, dateTimePicker1) {\n      return this.http.get(glob.apiUrl + \"Dashboard/bindDataGridOnPunchMIR\", {\n        params: {\n          plantCode: plantCode,\n          dateTimePicker1: dateTimePicker1\n        }\n      }).pipe(map(response => {\n        return response;\n      }), catchError(error => {\n        return \"error\";\n      }));\n    }\n\n    onBalAllocateMIR() {\n      return this.httpd.get(glob.apiUrl + \"Dashboard/onBalAllocateMIR\", {\n        params: {}\n      }).pipe(map(response => {\n        return response.json();\n      }));\n    }\n\n    bindDataGridOnAllocateMIR(plantCode) {\n      return this.http.get(glob.apiUrl + \"Dashboard/bindDataGridOnBalAllocateMIR\", {\n        params: {\n          plantCode: plantCode\n        }\n      }).pipe(map(response => {\n        return response;\n      }), catchError(error => {\n        return \"error\";\n      }));\n    }\n\n    bindDataGridOnradioButton1(plantCode) {\n      return this.http.get(glob.apiUrl + \"Dashboard/bindDataGridOnradioButton1\", {\n        params: {\n          plantCode: plantCode\n        }\n      }).pipe(map(response => {\n        return response;\n      }), catchError(error => {\n        return \"error\";\n      }));\n    }\n\n    shop(plantCode) {\n      console.log(plantCode);\n      return this.http.get(glob.apiUrl + \"Dashboard/shopdetails\", {\n        params: {\n          lblPlantCode: plantCode\n        }\n      }).pipe(map(response => {\n        return response;\n      }), catchError(error => {\n        return \"error\";\n      }));\n    }\n\n  }\n\n  DashboardService.ɵfac = function DashboardService_Factory(t) {\n    return new (t || DashboardService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Http));\n  };\n\n  DashboardService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DashboardService,\n    factory: DashboardService.ɵfac,\n    providedIn: 'root'\n  });\n  return DashboardService;\n})();","map":null,"metadata":{},"sourceType":"module"}