{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { routerTransition } from '../../router.animations';\nimport { ModalDismissReasons, NgbModal } from '@ng-bootstrap/ng-bootstrap'; //load xml\n\nimport xml2js from 'xml2js';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Router } from '@angular/router';\nlet DashboardComponent = class DashboardComponent {\n  constructor(modalService, http, router) {\n    this.modalService = modalService;\n    this.http = http;\n    this.router = router;\n    this.barcode = '';\n    this.values = [];\n    this.btnFicep = true;\n    this.btnVernet = true;\n    this.btnRetrofit = true;\n    this.btnAll = false;\n    this.orderno = '';\n    this.machinName = '';\n    this.fgItem = '';\n    this.billableCode = '';\n    this.quantity = '';\n    this.sectionDiamention1 = '';\n    this.sectionDiamention2 = '';\n    this.sectionDiamention3 = '';\n    this.sectionDiamention4 = '';\n    this.length = '';\n    this.bredth = '';\n    this.ddlSectionType = '';\n    this.ddlMaterialGrade = '';\n    this.markOnJob1 = '';\n    this.markOnJob2 = '';\n    this.markOnJob3 = '';\n    this.processName = '';\n    this.MATERIAL_GRADE = [\"MS\", \"HT\"];\n    this.optionSelectedMG = \"HT\";\n    this.SECTION_TYPE = [\"Angle\", \"Plate\"];\n    this.optionSelectedST = \"Plate\";\n  }\n\n  ngOnInit() {}\n\n  onKey(event) {\n    debugger;\n    console.log(\"EVENT!!!!!!!!!!!!!!\" + event);\n    this.barcode = event.target.value;\n    this.orderno = this.barcode;\n    console.log(this.barcode);\n    this.loadXml();\n  }\n\n  onOptionsSelectedMaterialGrade(event) {\n    console.log(event); //option value will be sent as event\n  }\n\n  onOptionsSelectedSectionType(event) {\n    console.log(event); //option value will be sent as event\n  }\n\n  loadXml() {\n    /*Read xml Data from physical folder*/\n    this.http.get('assets/Response.xml', {\n      headers: new HttpHeaders().set('Content-Type', 'text/xml').append('Access-Control-Allow-Methods', 'GET').append('Access-Control-Allow-Origin', '*').append('Access-Control-Allow-Headers', \"Access-Control-Allow-Headers, Access-Control-Allow-Origin, Access-Control-Request-Method\"),\n      responseType: 'text'\n    }).subscribe(data => {\n      this.parseXML(data).then(data => {\n        this.xmlItems = data[0]; // console.log(this.xmlItems);\n\n        this.orderno = this.xmlItems.WADOCO; // order no\n\n        this.fgItem = this.orderno;\n        this.markOnJob3 = this.xmlItems.WALITM; // mark on job 3\n\n        this.quantity = this.xmlItems.WAUORG; // quantity \n\n        this.sectionDiamention1 = this.xmlItems.IXLITM; // section diamention 1\n\n        if (this.xmlItems.IXLITM.startsWith('M')) {\n          this.optionSelectedMG = \"MS\";\n        }\n\n        this.length = this.xmlItems.IXY55RML; // length\n\n        this.billableCode = this.xmlItems.WAVR01; // billable code\n\n        this.processName = this.billableCode.split('-')[0].startsWith('0') ? this.billableCode.split('-')[0].substring(1) : this.billableCode.split('-')[0];\n        this.bredth = this.xmlItems.IXY55RMB; // bredth\n\n        this.sectionDiamention3 = this.xmlItems.IMSEG5; // section diamention 3\n\n        var section_type = this.xmlItems.IXSEG2;\n\n        if (section_type.includes('A')) {\n          this.optionSelectedST = \"Angle\";\n        }\n\n        if (this.optionSelectedST == \"Angle\") {\n          this.sectionDiamention2 = this.xmlItems.IMSEG4;\n          this.sectionDiamention4 = this.xmlItems.IMSEG6;\n        } else if (this.optionSelectedST == \"Plate\") {\n          this.sectionDiamention4 = this.xmlItems.IMSEG4;\n          this.sectionDiamention2 = this.xmlItems.IMSEG6;\n        }\n      });\n    });\n  } //parsing xml data and assigning to variables\n\n\n  parseXML(data) {\n    return new Promise(resolve => {\n      var k,\n          arr = [],\n          parser = new xml2js.Parser({\n        trim: true,\n        explicitArray: true\n      });\n      parser.parseString(data, function (err, result) {\n        //var obj = result[\"SOAP:Envelope\"][\"SOAP:Body\"][0][\"ns0:MT_R_Response_SMARTCAM\"][0].FGMARK[0];\n        var obj = result[\"SOAP:Envelope\"][\"SOAP:Body\"][0][\"ns0:MT_R_Response_SMARTCAM\"][0];\n        arr.push({\n          WADOCO: obj.WADOCO[0],\n          WALITM: obj.WALITM[0],\n          WAUORG: obj.WAUORG[0],\n          IXLITM: obj.IXLITM[0],\n          WAMMCU: obj.WAMMCU[0],\n          IXY55RML: obj.IXY55RML[0],\n          WAITM: obj.WAITM[0],\n          WAVR01: obj.WAVR01[0],\n          IXITM: obj.IXITM[0],\n          IXY55RMB: obj.IXY55RMB[0],\n          IXSEG2: obj.IXSEG2[0],\n          IXMMCU: obj.IXMMCU[0],\n          IXKIT: obj.IXKIT[0],\n          IMSEG4: obj.IMSEG4[0],\n          IMSEG5: obj.IMSEG5[0],\n          IMSEG6: obj.IMSEG6[0],\n          IMITM: obj.IMITM[0],\n          FGMARK: obj.FGMARK[0]\n        });\n        resolve(arr);\n      });\n    });\n  }\n\n  triggerModal(content) {\n    this.modalService.open(content, {\n      ariaLabelledBy: 'modal-basic-title',\n      size: 'xl',\n      backdrop: 'static'\n    }).result.then(res => {\n      this.closeModal = `Closed with: ${res}`;\n    }, res => {\n      this.closeModal = `Dismissed ${this.getDismissReason(res)}`;\n    });\n  }\n\n  getDismissReason(reason) {\n    if (reason === ModalDismissReasons.ESC) {\n      return 'by pressing ESC';\n    } else if (reason === ModalDismissReasons.BACKDROP_CLICK) {\n      return 'by clicking on a backdrop';\n    } else {\n      return `with: ${reason}`;\n    }\n  }\n\n  refresh() {\n    // this.router.navigate(['/dashboard']);\n    window.location.reload();\n  }\n\n};\nDashboardComponent = __decorate([Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss'],\n  animations: [routerTransition()]\n}), __metadata(\"design:paramtypes\", [NgbModal, HttpClient, Router])], DashboardComponent);\nexport { DashboardComponent };","map":null,"metadata":{},"sourceType":"module"}