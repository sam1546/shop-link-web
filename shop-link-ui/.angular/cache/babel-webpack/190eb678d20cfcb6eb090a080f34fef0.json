{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { Response, Http } from '@angular/http';\nimport { map, catchError } from 'rxjs/operators';\nimport * as glob from '../models/global';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/http\";\nexport let MultiprocessService = /*#__PURE__*/(() => {\n  class MultiprocessService {\n    constructor(http, httpd) {\n      this.http = http;\n      this.httpd = httpd;\n    }\n\n    reversePO(richTextBox1) {\n      return this.http.get(glob.apiUrl + \"Multiprocess/bindDataGridALLRecords\", {\n        params: {\n          richTextBox1: richTextBox1\n        }\n      }).pipe(map(response => {\n        return response;\n      }), catchError(error => {\n        return \"error\";\n      }));\n    }\n\n    GetWorkCenter(group) {\n      return this.httpd.get(glob.apiUrl + \"Dashboard/loadWorkCenters\", {\n        params: {\n          group: group\n        }\n      }).pipe(map(response => {\n        return response.json();\n      }), catchError(error => {\n        return \"error\";\n      }));\n    }\n\n    GetGroups() {\n      return this.httpd.get(glob.apiUrl + \"Dashboard/loadGroups\").pipe(map(response => {\n        return response.json();\n      }));\n    }\n\n    getBpByMirno(mirno) {\n      return this.httpd.get(glob.apiUrl + \"Dashboard/getBpByMirno\", {\n        params: {\n          mirno: mirno\n        }\n      }).pipe(map(response => {\n        return response.json();\n      }));\n    }\n\n  }\n\n  MultiprocessService.ɵfac = function MultiprocessService_Factory(t) {\n    return new (t || MultiprocessService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Http));\n  };\n\n  MultiprocessService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MultiprocessService,\n    factory: MultiprocessService.ɵfac,\n    providedIn: 'root'\n  });\n  return MultiprocessService;\n})();","map":null,"metadata":{},"sourceType":"module"}